{"version":3,"sources":["utils/DataAreaContext.js","components/DataBody/index.js","components/DataTable/index.js","components/SearchName/index.js","components/Nav/index.js","utils/API.js","components/DataArea/index.js","components/Main/index.js","components/Wrapper/index.js","components/Header/index.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["DataAreaContext","React","createContext","DataBody","context","useContext","formatDate","date","dateArray","split","year","join","undefined","developerState","filteredUsers","name","map","login","picture","phone","email","dob","data-th","className","src","medium","alt","first","last","href","target","uuid","DataTable","id","headings","width","style","onClick","handleSort","toLowerCase","SearchName","type","placeholder","aria-label","onChange","e","handleSearchChange","Nav","axios","get","DataArea","useState","users","order","setDeveloperState","useEffect","API","then","results","data","Provider","value","event","filter","filteredList","item","indexOf","heading","sortedUsers","sort","a","b","localeCompare","length","Main","Wrapper","children","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e7bb6a8e.chunk.js","sourcesContent":["import React from \"react\";\n// components will more accessible, this isnt a great idea because it makes it harder to reuse components\nconst DataAreaContext = React.createContext({\n\n});\n\nexport default DataAreaContext;","import React, { useContext } from \"react\";\nimport \"./DataBody.css\"\nimport DataAreaContext from \"../../utils/DataAreaContext\"\n\nconst DataBody = () => {\n    const context = useContext(DataAreaContext);\n\n    function formatDate(date) {\n        const dateArray = date.split(\"-\");\n        const year = dateArray[0];\n        const month = dateArray[1];\n        const dayArray = dateArray[2].split(\"T\");\n        const day = dayArray[0];\n        const formattedDate = [month, day, year].join(\"-\");\n        return formattedDate;\n    }\n    return (\n        <tbody>\n            {context.developerState.filteredUsers[0] !== undefined && context.developerState.filteredUsers[0].name !== undefined ? (\n                context.developerState.filteredUsers.map(({ login, name, picture, phone, email, dob }) => {\n                    return (\n                        <tr key={login.uuid}>\n                            <td data-th=\"Image\" className=\"align-middle\">\n                                <img\n                                    src={picture.medium}\n                                    alt={\"profile image for \" + name.first + \" \" + name.last}\n                                    className=\"image-cell img-responsive\"\n                                />\n                            </td>\n                            <td data-th=\"Name\" className=\"name-cell align-middle\">\n                                {name.first} {name.last}\n                            </td>\n                            <td data-th=\"Phone\" className=\"phone-cell align-middle\">\n                                {phone}\n                            </td>\n                            <td data-th=\"Email\" className=\"email-cell align-middle\">\n                                <a href={\"mailto:\" + email} target=\"__blank\">\n                                    {email}\n                                </a>\n                            </td>\n                            <td data-th=\"DOB\" className=\"DOB-cell align-middle\">\n                                {formatDate(dob.date)}\n                            </td>\n                        </tr>\n                    );\n                })\n            ) : (\n                    <></>\n                )}\n        </tbody>\n    );\n}\n\nexport default DataBody;\n","import React, { useContext } from \"react\";\nimport DataBody from \"../DataBody\";\nimport \"./DataTable.css\";\nimport DataAreaContext from \"../../utils/DataAreaContext\";\n\nconst DataTable = () => {\n    const context = useContext(DataAreaContext);\n\n    return (\n\n        <div className=\"datatable mt-5\">\n            <table\n                id=\"table\"\n                className=\"table table-striped table-hover table-condensed\"\n            >\n                <thead>\n                    <tr>\n                        {context.developerState.headings.map(({ name, width }) => {\n                            return (\n                                <th\n                                    className=\"col\"\n                                    key={name}\n                                    style={{ width }}\n                                    onClick={() => {\n                                        context.handleSort(name.toLowerCase());\n                                    }}\n                                >\n                                    {name}\n                                    <span className=\"pointer\"></span>\n                                </th>\n                            );\n                        })}\n                    </tr>\n                </thead>\n                <DataBody />\n            </table>\n        </div>\n    );\n}\n\nexport default DataTable;","import React, { useContext } from \"react\";\nimport \"./SearchName.css\";\nimport DataAreaContext from \"../../utils/DataAreaContext\";\n\nconst SearchName = () => {\n    const context = useContext(DataAreaContext);\n\n    return (\n        <div className=\"searchbox\">\n            <form className=\"form-inline box\">\n                <input\n                    className=\"form-control mr-sm-2 search-form\"\n                    type=\"search\"\n                    placeholder=\"Search\"\n                    aria-label=\"Search\"\n                    onChange={e => context.handleSearchChange(e)}\n                />\n                <button className=\"btn my-2 my-sm-0\" type=\"submit\">\n                    Search\n                 </button>\n            </form>\n        </div>\n    );\n}\nexport default SearchName;","import React from 'react';\nimport SearchName from \"../SearchName\";\nimport \"./Nav.css\";\n\nfunction Nav() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n\n       <div className=\"search-area col-4\">\n        <SearchName />\n    </div>\n</nav>\n    );\n}\nexport default Nav;","import axios from \"axios\";\n\nexport default{ \n    getUsers:function(){    \n\n        return axios.get(\"https://randomuser.me/api/?results=1000&nat=us\")\n    \n    }\n};\n\n","import React, { useState, useEffect } from \"react\";\nimport DataTable from \"../DataTable\";\nimport Nav from \"../Nav\";\nimport API from \"../../utils/API\";\nimport \"./DataArea.css\";\nimport DataAreaContext from \"../../utils/DataAreaContext\"\n\nconst DataArea = () => {\n    const [developerState, setDeveloperState] = useState({\n        users: [],\n        order: \"ascend\",\n        filteredUsers: [],\n        headings: [\n            { name: \"Image\", width: \"10%\", },\n            { name: \"Name\", width: \"10%\", },\n            { name: \"Phone\", width: \"20%\", },\n            { name: \"Email\", width: \"20%\", },\n            { name: \"DOB\", width: \"10%\", }\n        ]\n    });\n\n    const handleSort = heading => {\n        if (developerState.order === \"descend\") {\n            setDeveloperState({\n                order: \"ascend\"\n            })\n        } else {\n            setDeveloperState({\n                order: \"descend\"\n            })\n        }\n\n        const compareFnc = (a, b) => {\n            if (developerState.order === \"ascend\") {\n                if (a[heading] === undefined) {\n                    return 1;\n                } else if (b[heading] === undefined) {\n                    return -1;\n                } else if (heading === \"name\") {\n                    return a[heading].first.localeCompare(b[heading].first);\n                } else {\n                    return b[heading] - a[heading];\n                }\n            } else {\n                if (a[heading] === undefined) {\n                    return 1;\n                } else if (b[heading] === undefined) {\n                    return -1;\n                } else if (heading === \"name\") {\n                    return b[heading].first.localeCompare(a[heading].first);\n                } else {\n                    return b[heading] - a[heading];\n                }\n            }\n        }\n        const sortedUsers = developerState.filteredUsers.sort(compareFnc);\n\n        setDeveloperState({\n            ...developerState,\n            filteredUsers: sortedUsers\n        });\n\n    };\n\n    const handleSearchChange = event => {\n        const filter = event.target.value;\n        const filteredList = developerState.users.filter(item => {\n            let values = item.name.first.toLowerCase();\n            return values.indexOf(filter.toLowerCase()) !== -1;\n        });\n\n        setDeveloperState({\n            ...developerState,\n            filteredUsers: filteredList\n        });\n    };\n\n    useEffect(() => {\n            API.getUsers().then(results => {\n                setDeveloperState({\n                    ...developerState,\n                    users: results.data.results,\n                    filteredUsers: results.data.results\n                });\n            \n        });\n    }, []);\n\n    return (\n        <DataAreaContext.Provider\n            value={{ developerState, handleSearchChange, handleSort }}\n        >\n            <Nav />\n            <div className=\"data-area\">\n                {developerState.filteredUsers.length > 0\n                    ? <DataTable />\n                    : <div></div>\n                }\n            </div>\n        </DataAreaContext.Provider>\n    );\n}\n\nexport default DataArea;","import React from \"react\";\nimport DataArea from \"../DataArea/index.js\";\nimport \"./Main.css\";\n\nfunction Main() {\n    return (\n        <>\n            <DataArea />\n        </>\n    );\n}\n\nexport default Main;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nfunction Wrapper({ children }) {\n  return <div className=\"wrapper\">{children}</div>;\n}\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header () {\n    return (\n        <div className=\"header\">\n            <h1>Employee Directory</h1>\n            <p>Click on \"Name\" to sort Alphabetically</p>\n        </div>\n    )\n}\n\nexport default Header;\n\n\n","import React from 'react';\nimport Main from './components/Main';\nimport Wrapper from './components/Wrapper';\nimport Header from './components/Header';\n// import Loader from './components/spinner';\n\n\nfunction App() {\n    return (\n      <div className= \"App loader\">\n     <Wrapper>\n       <Header />\n       <Main />\n     </Wrapper>\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\nserviceWorkerRegistration.unregister();"],"sourceRoot":""}